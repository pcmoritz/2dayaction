#include <iostream>
#include "field.hh"
#include <sstream>
#include <cstdio>
#include "alpha-beta-ki.hh"
#include <time.h>
#include "nick_ki.hh"

using namespace std;

// protocol for AI:

class human_player {
	std::string player_name;
	stone player;
	// this function has to ensure that in "move", nothing like
	// {a = valid_move, b = invalid_move, c = valid_move} happens
public:
	human_player(std::string name) : player_name(name), player(WHITE) { }
	move operator()(field& f) {
		std::cout << player_name +
			std::string(": Please specify your move ('n' for no move)!");
		return read_move();
	}
};

<<<<<<< HEAD
int count_stones(int color,field &f) {
	int tmp = 0;
	for(int i=0;i<11;i++) {
		for(int j=0;j<11;j++) {
			if(f.is_pos_inside(i, j)) {
				if(f.get_stone(i,j)==color) tmp+=1;

			} else {
				f.set_stone(i,j,EMPTY);
			}	
		}
	}
	return tmp;
}

bool check_victory(field &f){
	if(count_stones(WHITE,f)<7){
		std::cout<<"BLACK won!"<<std::endl;
		print_field(f);
		return true;
	}
	if(count_stones(BLACK,f)<7){
		std::cout<<"White won!"<<std::endl;	
		print_field(f);
		return true;
	}
}
=======
>>>>>>> 279deced863f4dbf752f9e3dd7dd3724278bdc33

int main() {
	std::srand(time(NULL));
	field f = start_field();
	
	alpha_beta_player player_one = alpha_beta_player("Black", BLACK);
	nick_player player_two("White", WHITE);
	
	move player_move;
	for(;;) {
		//print_field(f);
		player_move = player_one(f);
		do_move(f,player_move);	
		//print_field(f);
		//print_move(player_move);
		//do_move(f,player_move);
<<<<<<< HEAD
		/*if(move_valid(player_move,f)){
			do_move(f,player_move);	
		}else{
			std::cout<<"Black cheated"<<std::endl;
			print_field(f);
			print_move(player_move);
			std::getchar();
		}*/
=======
    //if(move_valid(player_move,f)){
			do_move(f,player_move);	
		//}else{
			//std::cout<<"Black cheated"<<std::endl;
			//print_field(f);
			//print_move(player_move);
			//std::getchar();
		//}
>>>>>>> 279deced863f4dbf752f9e3dd7dd3724278bdc33
		if(check_victory(f)) break;
		//print_field(f);
		//std::getchar();
		//print_field(f);
		player_move = player_two(f);
<<<<<<< HEAD
		do_move(f,player_move);	
		/*if(move_valid(player_move,f)){
			do_move(f,player_move);
		}else{
			std::cout<<"White cheated"<<std::endl;
			print_field(f);
			print_move(player_move);
			std::getchar();	
		}*/
=======
		//if(move_valid(player_move,f)){
			do_move(f,player_move);
		//}else{
	//		std::cout<<"White cheated"<<std::endl;
	//		print_field(f);
	//		print_move(player_move);
	//		std::getchar();	
	//	}
>>>>>>> 279deced863f4dbf752f9e3dd7dd3724278bdc33
		if(check_victory(f)) break;
		//std::getchar();
	}
}
